#!/usr/bin/python

#
# Copyright (c) 2016-2018, Xerox Corporation (Xerox) and Palo Alto Research Center, Inc (PARC)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL XEROX OR PARC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

__author__ = 'mmosko'

from CCNx.CCNxContentObject import *


class CCNxManifest(object):
    """
    Assumes the manifests and content objects all have the same name prefix
    as the current object, less the chunk number.  Each section (data and manifests)
    will have its own starting chunk number and all the links are assumed to be
    relative to that number.

    The hash values of links are not computed until one generates the wrapping content object.
    The wrapping content object is generated by these methods: sign, get_content_object, hash.

    Assumptions:
    - The chunk number of the first element of a list is the minimum chunk number in that list.
    - The chunk numbers in a list monotonically increase
    """

    def __init__(self, name, manifest_fanout, data_fanout):
        self.__name = name
        self.__manifest_links = []
        self.__data_links = []
        self.__content_object = None
        self.__manifest_fanout = manifest_fanout
        self.__data_fanout = data_fanout

    def __str__(self):
        return "Manifest({}, manifests={}, data={})".format(
            self.__name, self.__manifest_links, self.__data_links)

    def __repr__(self):
        return self.__str__()

    def add_data_link(self, content_object):
        """Appends the content_object to the data links"""
        self.__data_links.append(content_object)

    def data_links_length(self):
        return len(self.__data_links)

    def add_manifest_link(self, manifest):
        """Appends the content_object to the data links"""
        self.__manifest_links.append(manifest)

    def manifest_links_length(self):
        return len(self.__manifest_links)

    def sign(self, key):
        co = self.get_content_object()
        co.sign(key)

    @staticmethod
    def _generate_hash_list(object_list):
        """
        The list must be of things that have a 'hash' method that returns
        an array of bytes.  Returns the concatenation of all bytes.

        :param object_list: A list of manifests or content objects
        :return: An array of bytes.
        """
        hash_array = array.array("B")
        for thing in object_list:
            hash = thing.hash()
            hash_array.extend(hash)
        return hash_array

    def _generate_content_object(self):
        length = 0

        manifest_links_tlv = None
        manifest_start_chunk_tlv = None
        manifest_hashes_tlv = None
        data_links_tlv = None
        data_start_chunk_tlv = None
        data_hashes_tlv = None

        # Manifest hash list section
        if len(self.__manifest_links) > 0:
            manifest_start_chunk = self.__manifest_links[0].name.chunk_number
            manifest_start_chunk_array = CCNxTlv.number_to_array(manifest_start_chunk)
            manifest_start_chunk_tlv = CCNxTlv(T_START_CHUNK_NUMBER, len(manifest_start_chunk_array), manifest_start_chunk_array)

            manifest_hashes = CCNxManifest._generate_hash_list(self.__manifest_links)
            manifest_hashes_tlv = CCNxTlv(T_HASH_LIST, len(manifest_hashes), manifest_hashes)

            manifest_links_tlv = CCNxTlv(T_MANIFEST_LINKS, 4 + manifest_start_chunk_tlv.length + 4 + manifest_hashes_tlv.length, None)
            length += 4 + manifest_links_tlv.length

        # Data links section
        if len(self.__data_links) > 0:
            data_start_chunk = self.__data_links[0].name.chunk_number
            data_start_chunk_array = CCNxTlv.number_to_array(data_start_chunk)
            data_start_chunk_tlv = CCNxTlv(T_START_CHUNK_NUMBER, len(data_start_chunk_array), data_start_chunk_array)

            data_hashes = CCNxManifest._generate_hash_list(self.__data_links)
            data_hashes_tlv = CCNxTlv(T_HASH_LIST, len(data_hashes), data_hashes)

            data_links_tlv = CCNxTlv(T_DATA_LINKS, 4 + data_start_chunk_tlv.length + 4 + data_hashes_tlv.length, None)
            length += 4 + data_links_tlv.length

        ##

        manifest_tlv = CCNxTlv(T_MANIFEST, length, None)

        co = CCNxContentObject(self.__name, None,
                               manifest_tlv,
                               manifest_links_tlv, manifest_start_chunk_tlv, manifest_hashes_tlv,
                               data_links_tlv, data_start_chunk_tlv, data_hashes_tlv)
        return co

    def get_content_object(self):
        if self.__content_object is None:
            self.__content_object = self._generate_content_object()
        return self.__content_object

    @property
    def name(self):
        return self.__name

    def hash(self):
        co = self.get_content_object()
        return co.hash()

    def remaining_manifest_fanout(self):
        return self.__manifest_fanout - len(self.__manifest_links)

    def manifest_links(self):
        return self.__manifest_links

    def data_links(self):
        return self.__data_links
